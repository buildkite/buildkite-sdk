// Code generated by the gen package. DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package buildkite

import "encoding/json"

// Whether to continue the build without waiting for the triggered step to complete
type TriggerStepAsyncValues interface {
	bool | string
}

// Whether to continue the build without waiting for the triggered step to complete
type TriggerStepAsync struct {
	Bool   *bool
	String *string
}

func (e TriggerStepAsync) MarshalJSON() ([]byte, error) {
	if e.Bool != nil {
		return json.Marshal(e.Bool)
	}
	if e.String != nil {
		return json.Marshal(e.String)
	}
	return json.Marshal(nil)
}

// Meta-data for the build
type TriggerStepBuildMetaData = map[string]interface{}

// Properties of the build that will be created when the step is triggered
type TriggerStepBuild struct {
	// The branch for the build
	Branch *string `json:"branch,omitempty"`
	// The commit hash for the build
	Commit *string `json:"commit,omitempty"`
	// Environment variables for this step
	Env *Env `json:"env,omitempty"`
	// The message for the build (supports emoji)
	Message *string `json:"message,omitempty"`
	// Meta-data for the build
	MetaData *TriggerStepBuildMetaData `json:"meta_data,omitempty"`
}
type TriggerStepType string

var TriggerStepTypeValues = map[string]TriggerStepType{
	"trigger": "trigger",
}

type TriggerStep struct {
	// Whether to proceed with this step and further steps if a step named in the depends_on attribute fails
	AllowDependencyFailure *AllowDependencyFailure `json:"allow_dependency_failure,omitempty"`
	// Whether to continue the build without waiting for the triggered step to complete
	Async *TriggerStepAsync `json:"async,omitempty"`
	// Which branches will include this step in their builds
	Branches *Branches `json:"branches,omitempty"`
	// Properties of the build that will be created when the step is triggered
	Build *TriggerStepBuild `json:"build,omitempty"`
	// The step keys for a step to depend on
	DependsOn *DependsOn `json:"depends_on,omitempty"`
	// A unique identifier for a step, must not resemble a UUID
	Id *string `json:"id,omitempty"`
	// A unique identifier for a step, must not resemble a UUID
	Identifier *string `json:"identifier,omitempty"`
	// A boolean expression that omits the step when false
	If *string `json:"if,omitempty"`
	// Agent-applied attribute: A glob pattern that omits the step from a build if it does not match any files changed in the build.
	IfChanged *string `json:"if_changed,omitempty"`
	// A unique identifier for a step, must not resemble a UUID
	Key *string `json:"key,omitempty"`
	// The label that will be displayed in the pipeline visualisation in Buildkite. Supports emoji.
	Label *string `json:"label,omitempty"`
	// The label that will be displayed in the pipeline visualisation in Buildkite. Supports emoji.
	Name *string `json:"name,omitempty"`
	// Whether this step should be skipped. Passing a string provides a reason for skipping this command
	Skip *Skip `json:"skip,omitempty"`
	// The conditions for marking the step as a soft-fail.
	SoftFail *SoftFail `json:"soft_fail,omitempty"`
	// The slug of the pipeline to create a build
	Trigger *string          `json:"trigger,omitempty"`
	Type    *TriggerStepType `json:"type,omitempty"`
}
