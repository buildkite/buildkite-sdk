# Code generated by the gen package. DO NOT EDIT.
# *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***
from __future__ import annotations
from typing import Union, Literal, List, Dict, Any, Optional
from pydantic import BaseModel, Field

type Agents = Union[AgentsObject,AgentsList]
type AgentsList = List[str]
type AgentsObject = Dict[str, Any]
type AllowDependencyFailure = Union[True,False,Literal['true'],Literal['false']]
type AllowedTeams = Union[str,List[str]]
class AutomaticRetry(BaseModel):
	exit_status: Optional[Union[Union[Literal['*']],int,List[int]]]
	limit: Optional[int]
	signal: Optional[str]
	signal_reason: Optional[Union[Literal['*'],Literal['none'],Literal['agent_refused'],Literal['agent_stop'],Literal['cancel'],Literal['process_run_error'],Literal['signature_rejected']]]
type AutomaticRetryList = List[AutomaticRetry]
class BlockStep(BaseModel):
	allow_dependency_failure: Optional[AllowDependencyFailure]
	allowed_teams: Optional[AllowedTeams]
	block: Optional[str]
	blocked_state: Optional[Union[Literal['passed'],Literal['failed'],Literal['running']]]
	branches: Optional[Branches]
	depends_on: Optional[DependsOn]
	fields: Optional[Fields]
	id: Optional[str]
	identifier: Optional[str]
	pipeline_if: Optional[If] = Field(alias='if')
	key: Optional[str]
	label: Optional[str]
	name: Optional[str]
	prompt: Optional[str]
	type: Optional[Union[Literal['block']]]
type Branches = Union[str,List[str]]
type BuildNotify = List[NotifySimple,NotifyEmail,NotifyBasecamp,NotifySlack,NotifyWebhook,NotifyPagerduty,NotifyGithubCommitStatus,NotifyGithubCheck]
class CacheObject(BaseModel):
	name: Optional[str]
	paths: Optional[List[str]]
	size: Optional[str]
type Cache = Union[str,List[str],CacheObject]
type CancelOnBuildFailing = Union[True,False,Literal['true'],Literal['false']]
class CommandStepRetry(BaseModel):
	automatic: Optional[CommandStepAutomaticRetry]
	manual: Optional[CommandStepManualRetry]
class CommandStepSignature(BaseModel):
	algorithm: Optional[str]
	signed_fields: Optional[List[str]]
	value: Optional[str]
class CommandStep(BaseModel):
	agents: Optional[Agents]
	allow_dependency_failure: Optional[AllowDependencyFailure]
	artifact_paths: Optional[Union[str,List[str]]]
	branches: Optional[Branches]
	cache: Optional[Cache]
	cancel_on_build_failing: Optional[CancelOnBuildFailing]
	command: Optional[CommandStepCommand]
	commands: Optional[CommandStepCommand]
	concurrency: Optional[int]
	concurrency_group: Optional[str]
	concurrency_method: Optional[Union[Literal['ordered'],Literal['eager']]]
	depends_on: Optional[DependsOn]
	env: Optional[Env]
	id: Optional[str]
	identifier: Optional[str]
	pipeline_if: Optional[If] = Field(alias='if')
	if_changed: Optional[str]
	image: Optional[str]
	key: Optional[str]
	label: Optional[str]
	matrix: Optional[Matrix]
	name: Optional[str]
	notify: Optional[CommandStepNotify]
	parallelism: Optional[int]
	plugins: Optional[Plugins]
	priority: Optional[int]
	retry: Optional[CommandStepRetry]
	signature: Optional[CommandStepSignature]
	skip: Optional[Skip]
	soft_fail: Optional[SoftFail]
	timeout_in_minutes: Optional[int]
	type: Optional[Union[Literal['script'],Literal['command'],Literal['commands']]]
type CommandStepAutomaticRetry = Union[Union[True,False,Literal['true'],Literal['false']],AutomaticRetry,AutomaticRetryList]
type CommandStepCommand = Union[List[str],str]
type CommandStepManualRetry = Union[Union[True,False,Literal['true'],Literal['false']],CommandStepManualRetryObject]
class CommandStepManualRetryObject(BaseModel):
	allowed: Optional[Union[True,False,Literal['true'],Literal['false']]]
	permit_on_passed: Optional[Union[True,False,Literal['true'],Literal['false']]]
	reason: Optional[str]
type CommandStepNotify = List[NotifySimple,NotifyBasecamp,NotifySlack,NotifyGithubCommitStatus,NotifyGithubCheck]
type DependsOn = Union[str,DependsOnList]
class DependsOnListObject(BaseModel):
	allow_failure: Optional[Union[True,False,Literal['true'],Literal['false']]]
	step: Optional[str]
type DependsOnList = List[str,DependsOnListObject]
type Env = Dict[str, Any]
type Fields = List[TextField,SelectField]
class GroupStep(BaseModel):
	allow_dependency_failure: Optional[AllowDependencyFailure]
	depends_on: Optional[DependsOn]
	group: str
	id: Optional[str]
	identifier: Optional[str]
	pipeline_if: Optional[If] = Field(alias='if')
	if_changed: Optional[str]
	key: Optional[str]
	label: Optional[str]
	name: Optional[str]
	notify: Optional[BuildNotify]
	skip: Optional[Skip]
	steps: GroupSteps
type GroupSteps = List[BlockStep,NestedBlockStep,StringBlockStep,InputStep,NestedInputStep,StringInputStep,CommandStep,NestedCommandStep,WaitStep,NestedWaitStep,StringWaitStep,TriggerStep,NestedTriggerStep]
type If = str
type IfChanged = str
type Image = str
class InputStep(BaseModel):
	allow_dependency_failure: Optional[AllowDependencyFailure]
	allowed_teams: Optional[AllowedTeams]
	branches: Optional[Branches]
	depends_on: Optional[DependsOn]
	fields: Optional[Fields]
	id: Optional[str]
	identifier: Optional[str]
	pipeline_if: Optional[If] = Field(alias='if')
	input: Optional[str]
	key: Optional[str]
	label: Optional[str]
	name: Optional[str]
	prompt: Optional[str]
	type: Optional[Union[Literal['input']]]
type Key = str
type Label = str
type Matrix = Union[MatrixElementList,MatrixObject]
class MatrixAdjustments(BaseModel):
	skip: Optional[Skip]
	soft_fail: Optional[SoftFail]
	matrix_with: Union[MatrixElementList,MatrixAdjustmentsWithObject] = Field(alias='with')
type MatrixAdjustmentsWithObject = Dict[str, str]
type MatrixElement = Union[str,int,bool]
type MatrixElementList = List[str,int,bool]
class MatrixObject(BaseModel):
	adjustments: Optional[List[MatrixAdjustments]]
	setup: MatrixSetup
type MatrixSetupObject = Dict[str, List[Union[str,int,bool]]]
type MatrixSetup = Union[MatrixElementList,Dict[str, List[Union[str,int,bool]]]]
class NestedBlockStep(BaseModel):
	block: Optional[BlockStep]
class NestedCommandStep(BaseModel):
	command: Optional[CommandStep]
	commands: Optional[CommandStep]
	script: Optional[CommandStep]
class NestedInputStep(BaseModel):
	input: Optional[InputStep]
class NestedTriggerStep(BaseModel):
	trigger: Optional[TriggerStep]
class NestedWaitStep(BaseModel):
	wait: Optional[WaitStep]
	waiter: Optional[WaitStep]
class NotifyBasecamp(BaseModel):
	basecamp_campfire: Optional[str]
	pipeline_if: Optional[If] = Field(alias='if')
class NotifyEmail(BaseModel):
	email: Optional[str]
	pipeline_if: Optional[If] = Field(alias='if')
class NotifyGithubCheck(BaseModel):
	github_check: Optional[Dict[str, Any]]
class NotifyGithubCommitStatusGithubCommitStatus(BaseModel):
	context: Optional[str]
class NotifyGithubCommitStatus(BaseModel):
	github_commit_status: Optional[NotifyGithubCommitStatusGithubCommitStatus]
	pipeline_if: Optional[If] = Field(alias='if')
class NotifyPagerduty(BaseModel):
	pipeline_if: Optional[If] = Field(alias='if')
	pagerduty_change_event: Optional[str]
type NotifySimple = Union[Literal['github_check'],Literal['github_commit_status']]
class NotifySlack(BaseModel):
	pipeline_if: Optional[If] = Field(alias='if')
	slack: Optional[Union[str,NotifySlackObject]]
class NotifySlackObject(BaseModel):
	channels: Optional[List[str]]
	message: Optional[str]
class NotifyWebhook(BaseModel):
	pipeline_if: Optional[If] = Field(alias='if')
	webhook: Optional[str]
type PipelineSteps = List[BlockStep,NestedBlockStep,StringBlockStep,InputStep,NestedInputStep,StringInputStep,CommandStep,NestedCommandStep,WaitStep,NestedWaitStep,StringWaitStep,TriggerStep,NestedTriggerStep,GroupStep]
type Plugins = Union[PluginsList,PluginsObject]
type PluginsListObject = Dict[str, Any]
type PluginsList = List[str,Dict[str, Any]]
type PluginsObject = Dict[str, Any]
type Prompt = str
class SelectField(BaseModel):
	default: Optional[Union[str,List[str]]]
	hint: Optional[str]
	key: str
	multiple: Optional[Union[True,False,Literal['true'],Literal['false']]]
	options: List[SelectFieldOption]
	required: Optional[Union[True,False,Literal['true'],Literal['false']]]
	select: Optional[str]
class SelectFieldOption(BaseModel):
	hint: Optional[str]
	label: str
	required: Optional[Union[True,False,Literal['true'],Literal['false']]]
	value: str
type Skip = Union[bool,str]
type SoftFail = Union[Union[True,False,Literal['true'],Literal['false']],SoftFailList]
type SoftFailList = List[SoftFailObject]
class SoftFailObject(BaseModel):
	exit_status: Optional[Union[Union[Literal['*']],int]]
type StringBlockStep = Union[Literal['block']]
type StringInputStep = Union[Literal['input']]
type StringWaitStep = Union[Literal['wait'],Literal['waiter']]
class TextField(BaseModel):
	default: Optional[str]
	format: Optional[str]
	hint: Optional[str]
	key: str
	required: Optional[Union[True,False,Literal['true'],Literal['false']]]
	text: Optional[str]
class TriggerStepBuild(BaseModel):
	branch: Optional[str]
	commit: Optional[str]
	env: Optional[Env]
	message: Optional[str]
	meta_data: Optional[Dict[str, Any]]
class TriggerStep(BaseModel):
	allow_dependency_failure: Optional[AllowDependencyFailure]
	pipeline_async: Optional[Union[True,False,Literal['true'],Literal['false']]] = Field(alias='async')
	branches: Optional[Branches]
	build: Optional[TriggerStepBuild]
	depends_on: Optional[DependsOn]
	id: Optional[str]
	identifier: Optional[str]
	pipeline_if: Optional[If] = Field(alias='if')
	if_changed: Optional[str]
	key: Optional[str]
	label: Optional[str]
	name: Optional[str]
	skip: Optional[Skip]
	soft_fail: Optional[SoftFail]
	trigger: str
	type: Optional[Union[Literal['trigger']]]
class WaitStep(BaseModel):
	allow_dependency_failure: Optional[AllowDependencyFailure]
	branches: Optional[Branches]
	continue_on_failure: Optional[Union[True,False,Literal['true'],Literal['false']]]
	depends_on: Optional[DependsOn]
	id: Optional[str]
	identifier: Optional[str]
	pipeline_if: Optional[If] = Field(alias='if')
	key: Optional[str]
	label: Optional[str]
	name: Optional[str]
	type: Optional[Union[Literal['wait'],Literal['waiter']]]
	wait: Optional[str]
