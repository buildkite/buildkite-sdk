{
    "title": "JSON schema for Buildkite pipeline configuration files",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "fileMatch": [
      "buildkite.yml",
      "buildkite.yaml",
      "buildkite.json",
      "buildkite.*.yml",
      "buildkite.*.yaml",
      "buildkite.*.json",
      ".buildkite/pipeline.yml",
      ".buildkite/pipeline.yaml",
      ".buildkite/pipeline.json",
      ".buildkite/pipeline.*.yml",
      ".buildkite/pipeline.*.yaml",
      ".buildkite/pipeline.*.json"
    ],
    "type": "object",
    "required": [
      "steps"
    ],
    "definitions": {
        "allowDependencyFailure": {
          "enum": [true, false, "true", "false"],
          "description": "Whether to proceed with this step and further steps if a step named in the depends_on attribute fails",
          "default": false
        },
        "agents": {
          "oneOf": [
            { "$ref": "#/definitions/agentsObject" },
            { "$ref": "#/definitions/agentsList" }
          ]
        },
        "agentsObject": {
          "type": "object",
          "description": "Query rules to target specific agents",
          "examples": [
            { "queue": "deploy" },
            { "ruby": "2*" }
          ]
        },
        "agentsList": {
          "type": "array",
          "description": "Query rules to target specific agents in k=v format",
          "examples": [
            "queue=default",
            "xcode=true"
          ],
          "items": {
            "type": "string"
          }
        },
        "automaticRetry": {
          "type": "object",
          "properties": {
            "exit_status": {
              "description": "The exit status number that will cause this job to retry",
              "anyOf": [
                {
                  "type": "string",
                  "enum": [ "*" ]
                },
                {
                  "type": "integer"
                },
                {
                  "type": "array",
                  "items": { "type": "integer" }
                }
              ]
            },
            "limit": {
              "type": "integer",
              "description": "The number of times this job can be retried",
              "minimum": 0,
              "maximum": 10
            },
            "signal": {
              "description": "The exit signal, if any, that may be retried",
              "type": "string",
              "examples": [
                "*",
                "none",
                "SIGKILL",
                "term"
              ]
            },
            "signal_reason": {
              "description": "The exit signal reason, if any, that may be retried",
              "type": "string",
              "enum": [
                "*",
                "none",
                "agent_refused",
                "agent_stop",
                "cancel",
                "process_run_error",
                "signature_rejected"
              ]
            }
          },
          "additionalProperties": false
        },
        "branches": {
          "description": "Which branches will include this step in their builds",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": { "type": "string" }
            }
          ],
          "examples": [
            "master",
            [ "feature/*", "chore/*" ]
          ]
        },
        "cache": {
          "description": "The paths for the caches to be used in the step",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": { "type": "string" }
            },
            {
              "type": "object",
              "properties": {
                "paths": {
                  "type": "array",
                  "items": { "type": "string" }
                },
                "size": {
                  "type": "string",
                  "pattern": "^\\d+g$"
                },
                "name": {
                  "type": "string"
                }
              },
              "required": ["paths"]
            }
          ],
          "examples": [
            "dist/",
            [ ".build/*", "assets/*" ],
            {
              "name": "cool-cache",
              "size": "20g",
              "paths": ["/path/one", "/path/two"]
            }
          ]
        },
        "cancelOnBuildFailing": {
          "enum": [true, false, "true", "false"],
          "description": "Whether to cancel the job as soon as the build is marked as failing",
          "default": false
        },
        "dependsOnList": {
          "type": "array",
          "items": {
            "anyOf": [
              {"type": "string"},
              {
                "type": "object",
                "properties": {
                  "step": { "type": "string" },
                  "allow_failure": {
                    "enum": [true, false, "true", "false"],
                    "default": false
                  }
                },
                "additionalProperties": false
              }
            ]
          }
        },
        "dependsOn": {
          "description": "The step keys for a step to depend on",
          "anyOf": [
            {"type": "null"},
            {"type": "string"},
            {"$ref": "#/definitions/dependsOnList"}
          ]
        },
        "env": {
          "type": "object",
          "description": "Environment variables for this step",
          "examples": [
            { "NODE_ENV": "test" }
          ]
        },
        "if": {
          "type": "string",
          "description": "A boolean expression that omits the step when false",
          "examples": [ "build.message != 'skip me'", "build.branch == 'master'" ]
        },
        "key": {
          "type": "string",
          "description": "A unique identifier for a step, must not resemble a UUID",
          "examples": [ "deploy-staging", "test-integration" ],
          "not": {
            "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
          }
        },
        "label": {
          "type": "string",
          "description": "The label that will be displayed in the pipeline visualisation in Buildkite. Supports emoji.",
          "examples": [ ":docker: Build" ]
        },
        "notifySimple": {
          "type": "string",
          "enum": ["github_check", "github_commit_status"]
        },
        "notifyEmail": {
          "type": "object",
          "properties": {
            "email": {
              "type": "string"
            },
            "if": {
              "$ref": "#/definitions/if"
            }
          },
          "additionalProperties": false
        },
        "notifyBasecamp": {
          "type": "object",
          "properties": {
            "basecamp_campfire": {
              "type": "string"
            },
            "if": {
              "$ref": "#/definitions/if"
            }
          },
          "additionalProperties": false
        },
        "notifySlackObject": {
          "type": "object",
          "properties": {
            "channels": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "message": {
              "type": "string"
            }
          }
        },
        "notifySlack": {
          "type": "object",
          "properties": {
            "slack": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/notifySlackObject"
                }
              ]
            },
            "if": {
              "$ref": "#/definitions/if"
            }
          },
          "additionalProperties": false
        },
        "notifyWebhook": {
          "type": "object",
          "properties": {
            "webhook": {
              "type": "string"
            },
            "if": {
              "$ref": "#/definitions/if"
            }
          },
          "additionalProperties": false
        },
        "notifyPagerduty": {
          "type": "object",
          "properties": {
            "pagerduty_change_event": {
              "type": "string"
            },
            "if": {
              "$ref": "#/definitions/if"
            }
          },
          "additionalProperties": false
        },
        "notifyGithubCommitStatus": {
          "type": "object",
          "properties": {
            "github_commit_status": {
              "type": "object",
              "properties": {
                "context": {
                  "description": "GitHub commit status name",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "if": {
              "$ref": "#/definitions/if"
            }
          },
          "additionalProperties": false
        },
        "notifyGithubCheck": {
          "type": "object",
          "properties": {
            "github_check": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        "buildNotify": {
          "type": "array",
          "description": "Array of notification options for this step",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/notifySimple"
              },
              {
                "$ref": "#/definitions/notifyEmail"
              },
              {
                "$ref": "#/definitions/notifyBasecamp"
              },
              {
                "$ref": "#/definitions/notifySlack"
              },
              {
                "$ref": "#/definitions/notifyWebhook"
              },
              {
                "$ref": "#/definitions/notifyPagerduty"
              },
              {
                "$ref": "#/definitions/notifyGithubCommitStatus"
              },
              {
                "$ref": "#/definitions/notifyGithubCheck"
              }
            ]
          }
        },
        "textField": {
          "type": "object",
          "properties": {
            "text": {
              "type": "string",
              "description": "The text input name",
              "examples": [
                "Release Name"
              ]
            },
            "key": {
              "type": "string",
              "description": "The meta-data key that stores the field's input",
              "pattern": "^[a-zA-Z0-9-_]+$",
              "examples": [
                "release-name"
              ]
            },
            "hint": {
              "type": "string",
              "description": "The explanatory text that is shown after the label",
              "examples": [
                "What’s the code name for this release? :name_badge:"
              ]
            },
            "format": {
              "type": "string",
              "description": "The format must be a regular expression implicitly anchored to the beginning and end of the input and is functionally equivalent to the HTML5 pattern attribute.",
              "format": "regex",
              "examples": [
                "[0-9a-f]+"
              ]
            },
            "required": {
              "enum": [true, false, "true", "false"],
              "default": true,
              "description": "Whether the field is required for form submission"
            },
            "default": {
              "type": "string",
              "description": "The value that is pre-filled in the text field",
              "examples": [
                "Flying Dolphin"
              ]
            }
          },
          "additionalProperties": false,
          "required": [
            "key"
          ]
        },
        "selectFieldOption": {
          "type": "object",
          "properties": {
            "label": {
              "type": "string",
              "description": "The text displayed on the select list item",
              "examples": [ "Stable" ]
            },
            "value": {
              "type": "string",
              "description": "The value to be stored as meta-data",
              "examples": [ "stable" ]
            },
            "hint": {
              "type": "string",
              "description": "The text displayed directly under the select field’s label",
              "examples": [
                "Which release stream does this belong in? :fork:"
              ]
            },
            "required": {
              "enum": [true, false, "true", "false"],
              "default": true,
              "description": "Whether the field is required for form submission"
            }
          },
          "additionalProperties": false,
          "required": [
            "label",
            "value"
          ]
        },
        "selectField": {
          "type": "object",
          "properties": {
            "select": {
              "type": "string",
              "description": "The text input name",
              "examples": [
                "Release Stream"
              ]
            },
            "key": {
              "type": "string",
              "description": "The meta-data key that stores the field's input",
              "pattern": "^[a-zA-Z0-9-_]+$",
              "examples": [
                "release-stream"
              ]
            },
            "default": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": { "type": "string" }
                }
              ],
              "description": "The value of the option(s) that will be pre-selected in the dropdown",
              "examples": [ "beta" , [ "alpha" , "beta" ] ]
            },
            "hint": {
              "type": "string",
              "description": "The explanatory text that is shown after the label",
              "examples": [
                "What’s the code name for this release? :name_badge:"
              ]
            },
            "multiple": {
              "enum": [true, false, "true", "false"],
              "description": "Whether more than one option may be selected",
              "default": false
              },
            "options": {
              "type": "array",
              "minItems": 1,
              "items": {"$ref": "#/definitions/selectFieldOption"}
            },
            "required": {
              "enum": [true, false, "true", "false"],
              "default": true,
              "description": "Whether the field is required for form submission"
            }
          },
          "additionalProperties": false,
          "required": [
            "key",
            "options"
          ]
        }
    },
    "properties": {}
  }